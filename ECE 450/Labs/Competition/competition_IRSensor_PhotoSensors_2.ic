// ECE450 Competition
// Team #6
// Team members: QUY PHAM, VAN NGUYEN.
//
// Goal: Push out all the (empty) coke bottle out of a circle.
//
#use pulse.icb

/*Port Definitions */
int RIGHT_MOTOR = 2; /* Motor Slot ? */
int LEFT_MOTOR = 1; /* Motor Slot ? */
int PHOTOPORT = 3;
/* Logic */
#define TRUE 1
#define FALSE 0
/* Motor Commands */
#define REST 0
#define STOP 5
#define PUSH 6
#define BACKWARD 7
#define SEARCH 8
/*  */
#define SEARCH_T 3.0
#define PUSH_T 2.0
#define BACKWARD_T 2.0
#define RUNNING_T 57.0

/* */
#define PHOTO_DIF 20
#define IRLOWER_LIMIT 110 // 27 in. away
#define IRUPPER_LIMIT 215 // 4 in. away

/* Global Variables */
int search_action;
int push_action;
int backward_action;
int terminate_action;
float running_t;
float search_t;
float push_t;
float backward_t;
int lpwr;
int rpwr;
/* Sensors */
int IRSensor;
//int LPhotoSensor;
//int RPhotoSensor;
//int old_LPhotoSensor;
//int old_RPhotoSensor;
int PhotoSensor;
int old_PhotoSensor;

/* Sensors flag */
int f_FoundCans;
//int f_LPhotoSensor;
//int f_RPhotoSensor;
int f_PhotoSensor;

void main()
{
    // local vars
    int motor_cmd;
    int old_motor_cmd;
    int flag;
    
    while(TRUE)
      {
        start_press();
        // set timers
        push_t = 0.0;        
        backward_t = 0.0;
        running_t = seconds() + RUNNING_T;
        // init global vars
        lpwr = 100;
        rpwr = 100;
        // init sensors
        old_PhotoSensor = 0;
        //old_LPhotoSensor = 0;
        //old_RPhotoSensor = 0;
        
        // init sensors flag
        f_FoundCans = FALSE;
        f_PhotoSensor = FALSE;
        //f_LPhotoSensor = FALSE;
        //f_RPhotoSensor = FALSE;
        
        // init behavior
        search_action = SEARCH;
        push_action = REST;
        backward_action = REST;
        terminate_action = REST;
        // init local vars
        old_motor_cmd = -1;
        flag = TRUE;
        while(flag)
          {
            // sensor readings
            IRSensor = range();
            PhotoSensor = analog(PHOTOPORT);
            printf("%d\n",(PhotoSensor-old_PhotoSensor));sleep(0.1);                        
            //LPhotoSensor = digital(15);
            //RPhotoSensor = digital(7);
            
            //Call Behaviors
            search();
            push();
            backward();
            terminate();
            
            //Arbitration            
            if (stop_button())
              {
                flag = FALSE;
                motor_cmd = STOP;
            }
            else if (terminate_action != REST)
              {
                flag = FALSE;
                motor_cmd = terminate_action;
            }
            else if (search_action != REST)
              {
                motor_cmd = search_action;
            }
            else if (push_action != REST)
              {
                motor_cmd = push_action;    
            }
            else if (backward_action != REST)
              {
                motor_cmd = backward_action;
            }
            if (motor_cmd != old_motor_cmd)
              {
                motor_controller(motor_cmd);
                old_motor_cmd = motor_cmd;
            }
            
        }
        
    }
}

int range()
{
    pulse(1);
    return irRange;
}

void IRSensor_Analyzer()
{
    if ((IRSensor <= IRUPPER_LIMIT)&&(IRSensor >= IRLOWER_LIMIT))
      {
        f_FoundCans = TRUE;
    }
    else
      {
        f_FoundCans = FALSE;
    }
}

void PhotoSensors_Analyzer()
{
    int dif = PhotoSensor - old_PhotoSensor;
    if (dif < 0) dif = -dif;
    if (push_action != PUSH)
      {
        f_PhotoSensor = FALSE;
        //f_LPhotoSensor = FALSE;
        //f_RPhotoSensor = FALSE;
    }
    else
      {
        if (dif > PHOTO_DIF)
          {
            f_PhotoSensor = TRUE;
        }
        else
          {
            f_PhotoSensor = FALSE;
        }
        /* only for 2 sensors: left and right
        if ((LPhotoSensor - old_LPhotoSensor) > PHOTO_DIF)
          {
            f_LPhotoSensor = TRUE;
        }
        else
          {
            f_LPhotoSensor = FALSE;
        }
        if ((RPhotoSensor - old_RPhotoSensor) > PHOTO_DIF)
          {
            f_RPhotoSensor = TRUE;
        }
        else
          {
            f_RPhotoSensor = FALSE;
        }
    */
    }
    //old_LPhotoSensor = LPhotoSensor;
    //old_RPhotoSensor = RPhotoSensor;
    old_PhotoSensor = PhotoSensor;    
}

void search()
{    
    if (search_action != REST)
      {
        IRSensor_Analyzer();
        if (f_FoundCans == TRUE)
          {
            search_action = REST;
            push_action = PUSH;
            f_FoundCans = FALSE;
            push_t = seconds() + PUSH_T;
        }
    }
}

void push()
{
    if(push_action != REST)
      {
        PhotoSensors_Analyzer();
        //if(push_t < seconds())
        if(f_PhotoSensor == TRUE)
          {
            f_PhotoSensor = FALSE;
            push_action = REST;
            backward_action = BACKWARD;
            backward_t = seconds() + BACKWARD_T;
        }
    }
}

void backward()
{
    if(backward_action != REST)
      {
        if(backward_t < seconds())
          {
            backward_action = REST;
            search_action = SEARCH;
        }
    }
}

void terminate()
{
    if (running_t < seconds())
      {
        terminate_action = STOP;
    }
}

void motor_controller(int motor_cmd) // Defines motor actions
{
    
    if (motor_cmd == STOP)
      {
        ao();       
    }
    else if (motor_cmd == SEARCH)
      {
        motor(LEFT_MOTOR,-13);
        motor(RIGHT_MOTOR,13);
    }
    else if (motor_cmd == PUSH)
      {
        ao();
        sleep(0.2);
        motor(LEFT_MOTOR,lpwr);
        motor(RIGHT_MOTOR,rpwr);
    }
    else if (motor_cmd == BACKWARD)
      {
        motor(LEFT_MOTOR,-lpwr);
        motor(RIGHT_MOTOR,-rpwr);
    }
}//end of motor_ controller definition




